// Generated by CoffeeScript 1.6.2
var CycleGoalsView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CycleGoalsView = (function(_super) {
  __extends(CycleGoalsView, _super);

  function CycleGoalsView() {
    _ref = CycleGoalsView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CycleGoalsView.prototype.loadModel = function() {
    var idElement;

    idElement = null;
    if (this.form) {
      idElement = this.form.find('input[name="id"]').val();
    }
    this.model = new CycleGoals({
      collectionName: 'CycleGoals',
      view: this
    });
    if (this.grid) {
      this.dataGrid();
    }
    return this;
  };

  CycleGoalsView.prototype.saveEntityComplete = function(_entity) {
    this.entity = {};
    this.resetForm();
    this.model.clean();
    this.dataGrid();
    return this;
  };

  CycleGoalsView.prototype.startEvents = function() {
    var _this = this;

    _this = this;
    getOptionsFromKinveyCollection('#selectCycle', 'Cycles', 'name', '_id', null, 'Selecione o ciclo');
    getOptionsFromKinveyCollection('#selectGoals', 'Goals', 'name', '_id', null, 'Selecione a meta');
    this.form.find('#selectCycle').change(function() {
      return Kinvey.DataStore.get('Cycles', $(this).val(), {
        success: function(response) {
          return _this.cycle = response;
        }
      });
    });
    this.form.find('#selectGoals').change(function() {
      return Kinvey.DataStore.get('Goals', $(this).val(), {
        success: function(response) {
          return _this.goal = response;
        }
      });
    });
    if (this.form) {
      this.form.submit(function(event) {
        var dataForm, relationshipsEntity;

        event.preventDefault();
        if (_this.form.valid()) {
          dataForm = _this.prepareDataFromFormToSave();
          dataForm.cycle = _this.cycle;
          dataForm.goal = _this.goal;
          relationshipsEntity = {
            exclude: ['cycle', 'goal'],
            relations: {
              cycle: 'Cycles',
              goal: 'Goals'
            }
          };
          return _this.model.save(dataForm, relationshipsEntity);
        }
      });
    }
    if (this.grid) {
      this.grid.find('.remove').live('click', function(event) {
        var id;

        event.preventDefault();
        id = $(this).attr('href').replace('#', '');
        _this.model.destroy(id);
        return _this.dataGrid();
      });
    }
    return this;
  };

  CycleGoalsView.prototype.dataGrid = function() {
    var actionTitles, actions, classStyles, columnFields, columnNames, dataFormats;

    columnFields = ['cycle-name', 'goal-name', 'expected', 'actions'];
    columnNames = ['Ciclo', 'Meta', 'Objetivo', 'Ações'];
    classStyles = new Array();
    dataFormats = new Array();
    actions = new Array();
    actions['remove'] = '#%_id%';
    actionTitles = new Array();
    actionTitles['remove'] = 'Remover';
    return window.generateDataTableAjax(this.grid.attr('id'), this.grid.attr('id') + 'Grid', 'CycleGoals', {
      cycle: 'Cycles',
      goal: 'Goals'
    }, columnNames, columnFields, classStyles, dataFormats, actions, actionTitles);
  };

  return CycleGoalsView;

})(AbstractView);
