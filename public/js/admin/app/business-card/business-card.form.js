// Generated by CoffeeScript 1.6.3
(function() {
  var BusinessCardController,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BusinessCardController = (function(_super) {
    __extends(BusinessCardController, _super);

    function BusinessCardController($scope) {
      var idElement, _this;
      this.setScope($scope);
      this.loadModel();
      this.loadScopeData();
      this.form = $('#businessCardForm');
      this.collectionName = 'BusinessCards';
      this.scopeForm = 'businessCardForm';
      this.formValidate();
      this.startEvents();
      this.loadUploadEvents();
      _this = this;
      _this.scope.showUploadImageOptions = true;
      _this.scope.wait = false;
      this.scope.save = function() {
        if (_this.form.valid()) {
          statusMessage('info', 'Salvando cartão de visita');
          return Kinvey.DataStore.save('BusinessCards', _this._prepareEntityToSave(_this.scope.businessCardForm), {
            relations: {
              customer: 'Customers'
            },
            exclude: ['customer'],
            success: function(businessCard) {
              return window.location.href = '/cartoes';
            }
          });
        }
      };
      idElement = this.form.find('input[name="id"]').val();
      if (idElement !== "") {
        this.loadEntity(idElement);
      }
      this.scope.remove = function(id) {
        var businessCardForm;
        if (confirm("Deseja realmente excluir esse cartão de visita?")) {
          businessCardForm = _this.scope.businessCardForm;
          businessCardForm.inactivedAt = formatKinveyDate();
          return Kinvey.DataStore.save('BusinessCards', _this._prepareEntityToSave(businessCardForm), {
            relations: {
              customer: 'Customers'
            },
            exclude: ['customer'],
            success: function(businessCard) {
              return window.location.href = '/cartoes';
            }
          });
        }
      };
    }

    BusinessCardController.prototype.loadModel = function() {
      var idElement, _this;
      _this = this;
      _this.scope.businessCardForm = {
        customer: '',
        cost: '',
        quantity: 0,
        deliveryEstimated: ''
      };
      idElement = null;
      if (this.form) {
        idElement = this.form.find('input[name="id"]').val();
      }
      this.model = new BusinessCard({
        successMessage: 'Cartão de visita cadastrada com sucesso',
        id: idElement,
        collectionName: 'BusinessCards',
        view: this
      });
      return this;
    };

    BusinessCardController.prototype.loadScopeData = function() {
      var _this;
      _this = this;
      statusMessage('info', 'Carregando informações');
      _this.scope.businessCardForm.imageUrl = !underscore.isUndefined(_this.scope.businessCardForm.imageUrl) && _this.scope.businessCardForm.imageUrl !== "" ? _this.scope.businessCardForm.imageUrl : 'http://www.placehold.it/200x150/EFEFEF/AAAAAA&amp;text=no+image';
      return _this.getOptionsFromKinveyCollection('customers', 'Customers', 'name');
    };

    BusinessCardController.prototype.startEvents = function() {
      var _this;
      _this = this;
      return _this.scope.edit = function(product) {};
    };

    BusinessCardController.prototype._prepareEntityLoaded = function(_entity) {
      _entity.customer = _entity.customer._id;
      _entity.deliveryEstimated = moment(_entity.deliveryEstimated).format('DD/MM/YYYY');
      _entity.imageUrl = !underscore.isUndefined(_entity.imageUrl) && _entity.imageUrl !== "" ? _entity.imageUrl : 'http://www.placehold.it/200x150/EFEFEF/AAAAAA&amp;text=no+image';
      return _entity;
    };

    BusinessCardController.prototype._prepareEntityToSave = function(_entity) {
      _entity.customer = {
        _id: _entity.customer
      };
      _entity.cost = resetMoneyMask(_entity.cost);
      _entity.quantity = parseInt(_entity.quantity);
      _entity.deliveryEstimated = formatKinveyDate(_entity.deliveryEstimated);
      _entity = underscore.omit(_entity, ['$$hashKey']);
      return _entity;
    };

    return BusinessCardController;

  })(AngularView);

  angularApp.controller('BusinessCardController', BusinessCardController);

}).call(this);
