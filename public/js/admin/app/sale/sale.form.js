// Generated by CoffeeScript 1.6.3
(function() {
  var SaleFormController,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SaleFormController = (function(_super) {
    __extends(SaleFormController, _super);

    function SaleFormController($scope) {
      this.setScope($scope);
      this.startEvents();
      this.loadEntities();
      this.modalsConfig();
      this.scope.customerList = [];
      this.scope.customerSelectedList = [];
      this.scope.productList = [];
      $('#selectCustomersModal').modal('hide');
    }

    SaleFormController.prototype.startEvents = function() {
      var _this;
      _this = this;
      return this.scope.addCustomerToSale = function(customer) {
        var found, oldCustomers;
        if (!customer.onSale) {
          oldCustomers = _this.scope.customerSelectedList;
          _this.scope.customerSelectedList = [];
          found = false;
          return angular.forEach(oldCustomers, function(customerSelected) {
            if (customer._id !== customerSelected._id) {
              return _this.scope.customerSelectedList.push(customerSelected);
            }
          });
        } else {
          return _this.scope.customerSelectedList.push(customer);
        }
      };
    };

    SaleFormController.prototype.loadEntities = function() {
      var _this;
      _this = this;
      this.scope.loadProducts = function() {
        var user;
        user = Kinvey.getActiveUser();
        return Kinvey.User.me({
          success: function(user) {
            var currentDate, queryRegionalCycle, regional;
            regional = user.regional;
            currentDate = moment().format("YYYY-MM-DDTHH:mm:ss.SSS") + 'Z';
            queryRegionalCycle = new Kinvey.Query();
            queryRegionalCycle.greaterThanOrEqualTo("endsIn", currentDate).lessThanOrEqualTo("startsIn", currentDate);
            queryRegionalCycle.and().equalTo("regional._id", regional._id);
            return Kinvey.DataStore.find("RegionalCycles", queryRegionalCycle, {
              success: function(list) {
                var cycle, oRegionalCycle, productAvailableQuery, queryRegionalCycleProducts;
                oRegionalCycle = list[0];
                cycle = list[0]["cycle"];
                productAvailableQuery = new Kinvey.Query();
                productAvailableQuery.equalTo("productAvailability._id", window.PRODUCT_AVAILABLE).or().equalTo("productAvailability._id", window.PRODUCT_LAUNCH);
                queryRegionalCycleProducts = new Kinvey.Query();
                queryRegionalCycleProducts.equalTo("regionalCycle._id", oRegionalCycle._id).and(productAvailableQuery);
                return Kinvey.DataStore.find("RegionalCycleProducts", queryRegionalCycleProducts, {
                  relations: {
                    product: true,
                    productAvailability: true
                  },
                  success: function(list) {
                    return _this.scope.$apply(function() {
                      return _this.scope.productList = list;
                    });
                  }
                });
              }
            });
          }
        });
      };
      this.scope.loadCustomers = function() {
        var myQuery, promise;
        myQuery = new Kinvey.Query();
        myQuery.ascending("name");
        return promise = Kinvey.DataStore.find("Customers", myQuery, {
          relations: {},
          success: function(list) {
            return _this.scope.$apply(function() {
              _this.scope.customerList = list;
              return _this.scope.openSelectCustomersModal();
            });
          },
          error: function(e) {}
        });
      };
      this.scope.loadCustomers();
      return this.scope.loadProducts();
    };

    SaleFormController.prototype.modalsConfig = function() {
      var _this;
      _this = this;
      this.scope.openSelectCustomersModal = function() {
        return _this.scope.selectCustomersModal = true;
      };
      this.scope.clseSelectCustomersModal = function() {
        return _this.scope.selectCustomersModal = false;
      };
      return this.scope.modalsOpt = {
        backdropFade: true,
        dialogFade: true
      };
    };

    return SaleFormController;

  })(AngularView);

  angularApp.controller('SaleFormController', SaleFormController);

}).call(this);
