// Generated by CoffeeScript 1.6.3
(function() {
  var InventoryController,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  InventoryController = (function(_super) {
    __extends(InventoryController, _super);

    function InventoryController($scope) {
      var idElement, _this;
      this.setScope($scope);
      this.loadModel();
      this.form = $('#inventoryForm');
      this.collectionName = 'Inventories';
      this.scopeForm = 'inventoryForm';
      this.formValidate();
      this.loadScopeData();
      _this = this;
      this.scope.edit = function(entity) {
        _this.scope.inventoryForm = entity;
        return _this.scope.inventoryForm.measurementUnit = entity.measurementUnit._id;
      };
      this.scope.save = function() {
        var _entity;
        if (_this.form.valid()) {
          statusMessage('info', 'Salvando materia prima');
          _entity = _this._prepareEntityToSave(_this.scope.inventoryForm);
          return Kinvey.DataStore.save('Inventories', _entity, {
            relations: {
              measurementUnit: 'MeasurementUnits'
            },
            exclude: ['measurementUnit'],
            success: function(inventory) {
              statusMessage('success', 'Materia prima salva com sucesso no estoque');
              return _this.scope.list();
            },
            error: function(e) {
              return statusMessage('error', 'Tivemos problemas em salvar esse item no seu estoque.');
            }
          });
        }
      };
      idElement = this.form.find('input[name="id"]').val();
      if (idElement !== "") {
        this.loadEntity(idElement);
      }
      this.scope.list = function() {
        var query;
        query = new Kinvey.Query();
        query.equalTo('inactivatedAt', '').or().equalTo('inactivatedAt', null);
        return Kinvey.DataStore.find("Inventories", query, {
          relations: {
            measurementUnit: "MeasurementUnits"
          },
          success: function(list) {
            console.log(list);
            return _this.scope.$apply(function() {
              return _this.scope.inventoryList = list;
            });
          }
        });
      };
      this.scope["delete"] = function(entity) {
        if (confirm("Deseja remover o registro?")) {
          return _this.model["delete"](entity._id);
        }
      };
      _this.scope.list();
    }

    InventoryController.prototype.loadModel = function() {
      var idElement;
      idElement = null;
      if (this.form) {
        idElement = this.form.find('input[name="id"]').val();
      }
      this.model = new Inventory({
        successMessage: 'Item cadastrado no estoque',
        id: idElement,
        collectionName: 'Inventories',
        view: this
      });
      return this;
    };

    InventoryController.prototype.loadScopeData = function() {
      var _this;
      _this = this;
      return _this.getOptionsFromKinveyCollection('measurementUnits', 'MeasurementUnits', 'name');
    };

    InventoryController.prototype.startEvents = function() {};

    InventoryController.prototype._prepareEntityToSave = function(_entity) {
      _entity = InventoryController.__super__._prepareEntityToSave.call(this, _entity);
      _entity.measurementUnit = {
        _id: _entity.measurementUnit
      };
      _entity.unitPrice = resetMoneyMask(_entity.unitPrice);
      _entity.quantity = parseInt(_entity.unitPrice);
      return _entity;
    };

    return InventoryController;

  })(AngularView);

  angularApp.controller('InventoryController', InventoryController);

}).call(this);
