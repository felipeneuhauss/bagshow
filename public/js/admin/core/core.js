// Generated by CoffeeScript 1.6.3
var AbstractModel, AbstractView, AngularView;

AbstractModel = (function() {
  function AbstractModel(_options) {
    this.options = $.extend({}, this.options, _options);
    this.setOptions();
    this.setMessages();
    this.triggerDependentViews = [];
    this.referenceParentEntity = {};
    this._entityLoad = false;
    if (this.id) {
      this.load();
    }
  }

  AbstractModel.prototype.setOptions = function() {
    if (this.options.collectionName) {
      this.collectionName = this.options.collectionName;
    }
    if (this.options.id) {
      this.id = this.options.id;
    }
    if (this.options.view) {
      this.view = this.options.view;
    }
    return this;
  };

  AbstractModel.prototype.setMessages = function() {
    this.successMessage = this.options.successMessage ? this.options.successMessage : 'Registro salvo com sucesso';
    this.removeMessage = this.options.removeMessage ? this.options.removeMessage : 'Registro removido com sucesso';
    this.errorMessage = this.options.errorMessage ? this.options.errorMessage : 'Ocorreu um problema ao salvar o registro';
    this.removeErrorMessage = this.options.removeErrorMessage ? this.options.removeErrorMessage : 'Ocorreu um problema ao remover o registro';
    return this;
  };

  AbstractModel.prototype.load = function(_idEntity) {
    var _this = this;
    if (_idEntity) {
      this.id = _idEntity;
    }
    Kinvey.DataStore.get(this.collectionName, this.id, {
      success: function(_entity) {
        _this._loadEntity(_entity);
        _this._loadComplete();
        return null;
      },
      error: function(e) {
        statusMessage('error', e.description);
        _this._cleanEntity();
        return null;
      }
    });
    return this;
  };

  AbstractModel.prototype._loadEntity = function(_entity) {
    this._entityLoad = true;
    return this.entity = _entity;
  };

  AbstractModel.prototype._loadComplete = function() {
    if (this.view) {
      this.view.loadEntityComplete(this.entity);
    }
    this.sendEntityToDependentView();
    return this;
  };

  AbstractModel.prototype._saveComplete = function() {
    if (this.view) {
      this.view.saveEntityComplete(this.entity);
    }
    this.sendEntityToDependentView();
    return this;
  };

  AbstractModel.prototype._preSave = function(_data) {
    _data = this.preSave(_data);
    if (!$.isEmptyObject(this.referenceParentEntity)) {
      $.each(this.referenceParentEntity, function(className, classObject) {
        return _data[className] = classObject;
      });
    }
    return _data;
  };

  AbstractModel.prototype.preSave = function(_data) {
    return _data;
  };

  AbstractModel.prototype.save = function(_data, _relationshipsRule) {
    var data, relationshipsEntityRule,
      _this = this;
    data = $.extend({}, this.entity, _data);
    data = this._preSave(data);
    relationshipsEntityRule = {
      success: function(_entity) {
        statusMessage('success', _this.successMessage);
        _this._loadEntity(_entity);
        _this._postSave();
        _this._saveComplete();
        return null;
      },
      error: function(e) {
        statusMessage('error', e.description);
        return null;
      }
    };
    if (!_relationshipsRule) {
      _relationshipsRule = {};
    }
    relationshipsEntityRule = $.extend({}, relationshipsEntityRule, _relationshipsRule);
    Kinvey.DataStore.save(this.collectionName, data, relationshipsEntityRule);
    return this;
  };

  AbstractModel.prototype._postSave = function() {
    this.postSave();
    return this;
  };

  AbstractModel.prototype.postSave = function() {
    return this;
  };

  AbstractModel.prototype._preDestroy = function() {
    return this;
  };

  AbstractModel.prototype.destroy = function(_id) {
    var _this = this;
    if (_id) {
      this.id = _id;
    }
    this._preDestroy();
    _this = this;
    return Kinvey.DataStore.destroy(this.collectionName, this.id, {
      success: function(_entity) {
        _this._postDestroy();
        _this._cleanEntity();
        _this._deleteComplete();
        return statusMessage('success', _this.removeMessage);
      },
      error: function(e) {
        console.log(e.description);
        return statusMessage('error', _this.removeErrorMessage);
      }
    });
  };

  AbstractModel.prototype["delete"] = function(_id) {
    var promise, _this;
    if (_id) {
      this.id = _id;
    }
    _this = this;
    return promise = Kinvey.DataStore.get(_this.collectionName, this.id, {
      success: function(response) {
        response["inactivatedAt"] = moment().format('YYYY-MM-DDTHH:mm:ss.SSS') + 'Z';
        return Kinvey.DataStore.save(_this.collectionName, response, {
          success: function(entityRemoved) {
            _this._postDestroy();
            _this._cleanEntity();
            _this._deleteComplete(entityRemoved);
            return statusMessage('success', _this.removeMessage);
          },
          error: function(e) {
            console.log(e.description);
            return statusMessage('error', _this.removeErrorMessage);
          }
        });
      }
    });
  };

  AbstractModel.prototype._postDestroy = function() {
    return this;
  };

  AbstractModel.prototype.clean = function() {
    return this._cleanEntity();
  };

  AbstractModel.prototype._cleanEntity = function() {
    this._entityLoad = false;
    this.entity = {};
    this.id = null;
    return this;
  };

  AbstractModel.prototype._deleteComplete = function(_entity) {
    if (this.view) {
      this.view.deleteEntityComplete(_entity);
    }
    return this;
  };

  AbstractModel.prototype.setTriggerDependentViews = function(_triggerDependentViews) {
    if ($.isArray(_triggerDependentViews)) {
      this.triggerDependentViews = _triggerDependentViews;
    }
    if (this._entityLoad) {
      this.sendEntityToDependentView;
    }
    return this;
  };

  AbstractModel.prototype.addTriggerDependentView = function(_triggerDependentView) {
    this.triggerDependentViews.push(_triggerDependentView);
    if (this._entityLoad) {
      _triggerDependentView.parentEntityLoad(this.entity);
    }
    return this;
  };

  AbstractModel.prototype.sendEntityToDependentView = function() {
    var _this = this;
    if ($.isArray(this.triggerDependentViews)) {
      if (this.triggerDependentViews.length) {
        $.each(this.triggerDependentViews, function(i, view) {
          view.parentEntityLoad(_this.entity);
          return null;
        });
      }
    }
    return this;
  };

  AbstractModel.prototype.addReferenceParentEntity = function(_parentClass, _parentObject) {
    this.referenceParentEntity[_parentClass] = _parentObject;
    return this;
  };

  AbstractModel.prototype.removeReferenceParentEntity = function(_parentClass) {
    this.referenceParentEntity[_parentClass] = null;
    return this;
  };

  return AbstractModel;

})();

AbstractView = (function() {
  function AbstractView(_options) {
    this.options = $.extend({}, this.options, _options);
    this.setOptions();
    this.startEvents();
    if (this.form) {
      this.formValidate();
    }
  }

  AbstractView.prototype.setOptions = function() {
    if (this.options.grid) {
      this.grid = $(this.options.grid);
    }
    if (this.options.form) {
      this.form = $(this.options.form);
    }
    return this;
  };

  AbstractView.prototype.populateForm = function() {
    var _this;
    _this = this;
    if (this.form && this.entity._id) {
      this.form.find('.kinvey').each(function() {
        var nameInput;
        try {
          nameInput = $(this).attr('name');
          if ($(this).hasClass('date') && _this.entity[nameInput]) {
            $(this).val(moment(_this.entity[nameInput]).format('DD/MM/YYYY'));
          } else {
            $(this).val(_this.entity[nameInput]);
          }
          return $(this).trigger('change');
        } catch (_error) {}
      });
      this.showPicture();
    }
    return this;
  };

  AbstractView.prototype.resetForm = function() {
    this.form.find('.kinvey').val('');
    this.form.find('input[name="id"]').val('');
    return this;
  };

  AbstractView.prototype.showPicture = function() {
    if (this.entity.mainPictureURL) {
      this.form.find('.fileupload .thumbnail').html($('<img>').attr('src', window.URL_S3 + this.entity.mainPictureURL));
    }
    return this;
  };

  AbstractView.prototype.loadModel = function() {
    return this;
  };

  AbstractView.prototype.getModel = function() {
    return this.model;
  };

  AbstractView.prototype.loadEntityComplete = function(_entity) {
    this.entity = _entity;
    this.populateForm();
    return this;
  };

  AbstractView.prototype.saveEntityComplete = function(_entity) {
    this.entity = _entity;
    this.resetForm();
    return this;
  };

  AbstractView.prototype.prepareDataFromFormToSave = function() {
    var data;
    data = [];
    this.form.find('.kinvey').each(function() {
      data[$(this).attr('name')] = $(this).val();
      if ($(this).hasClass('date') && $(this).val()) {
        data[$(this).attr('name')] = moment($(this).val(), 'DD/MM/YYYY').format('YYYY-MM-DDTHH:mm:ss.SSS[Z]');
      }
      if ($(this).hasClass('money') && $(this).val()) {
        return data[$(this).attr('name')] = resetMoneyMask($(this).val());
      }
    });
    if (this.form.find('input[name="id"]').val() === '') {
      data['inactivatedAt'] = null;
    }
    return data;
  };

  AbstractView.prototype.formValidate = function() {
    this.form.validate();
    return this;
  };

  AbstractView.prototype.startEvents = function() {
    return this;
  };

  AbstractView.prototype.parentEntityLoad = function(_parentEntity) {
    this.parentEntity = _parentEntity;
    this.renderElementsDependentParent();
    return this;
  };

  AbstractView.prototype.renderElementsDependentParent = function() {
    return this;
  };

  return AbstractView;

})();

AngularView = (function() {
  function AngularView(_options) {
    var _this;
    this.options = $.extend({}, this.options, _options);
    this.setOptions();
    _this = this;
    this.startEvents();
    this.loadScopeData();
    if (_this.form) {
      this.formValidate();
    }
    this.scope.list = function() {
      if (_this.scopeList) {
        return Kinvey.DataStore.find(_this.collectionName, _this.listQuery, {
          relations: _this.relationsList,
          success: function(list) {
            return _this.scope.$apply(function() {
              return _this.scope[_this.scopeList] = _this.prepareDataToList(list);
            });
          }
        });
      }
    };
    this.scope.list();
    this.scope.edit = function(entity) {
      return _this.scope[_this.scopeForm] = entity;
    };
    this.scope.save = function() {
      var entity;
      if (_this.scopeForm) {
        entity = _this.scope[_this.scopeForm];
        if (_this.form.valid()) {
          return _this.model.save(_this._prepareEntityToSave(entity));
        }
      }
    };
    this.scope["delete"] = function(entity) {
      return _this.model["delete"](entity._id);
    };
    this.scope.cancel = function() {
      return _this.scope[_this.scopeForm] = null;
    };
    true;
  }

  AngularView.prototype.setScope = function(scope) {
    this.scope = scope;
  };

  AngularView.prototype.setFactory = function(factory) {
    this.factory = factory;
  };

  AngularView.prototype.loadScopeData = function() {
    return this;
  };

  AngularView.prototype.setOptions = function() {
    if (this.options.grid) {
      this.grid = $(this.options.grid);
    }
    if (this.options.form) {
      this.form = $(this.options.form);
    }
    if (this.options.scopeList) {
      this.scopeList = this.options.scopeList;
    }
    if (this.options.scopeForm) {
      this.scopeForm = this.options.scopeForm;
    }
    this.listQuery = this.options.listQuery ? this.options.listQuery : new Kinvey.Query;
    if (this.options.collectionName) {
      this.collectionName = this.options.collectionName;
    }
    if (this.options.relationsList) {
      this.relationsList = this.options.relationsList;
    }
    return this;
  };

  AngularView.prototype.populateForm = function() {
    var _this;
    _this = this;
    if (_this.form && _this.entity._id) {
      _this.scope[_this.scopeForm] = _this.entity;
      _this.showPicture();
    }
    return this;
  };

  AngularView.prototype.resetForm = function() {
    var _this;
    _this = this;
    this.form.find('input[name="id"]').val('');
    return this;
  };

  AngularView.prototype.showPicture = function() {
    if (this.entity.mainPictureURL) {
      this.form.find('.fileupload .thumbnail').html($('<img>').attr('src', window.URL_S3 + this.entity.mainPictureURL));
    }
    return this;
  };

  AngularView.prototype.loadModel = function() {
    return this;
  };

  AngularView.prototype.getModel = function() {
    return this.model;
  };

  AngularView.prototype.loadEntityComplete = function(_entity) {
    var _this;
    this.entity = _entity;
    _this = this;
    if (_this.scope[_this.scopeForm]) {
      _this.scope.$apply(function() {
        return _this.scope[this.scopeForm] = _entity;
      });
    }
    this.populateForm();
    return this;
  };

  AngularView.prototype.saveEntityComplete = function(_entity) {
    var _this;
    _this = this;
    this.entity = _entity;
    this.resetForm();
    if (_this.scope[_this.scopeList]) {
      _this.scope.$apply(function() {
        var entityFound;
        entityFound = underscore.find(_this.scope[_this.scopeList], function(obj) {
          return obj._id === _entity._id;
        });
        if (!underscore.isObject(entityFound)) {
          return _this.scope[_this.scopeList].push(_entity);
        }
      });
    }
    console.log(this.entity);
    return this;
  };

  AngularView.prototype.deleteEntityComplete = function(_entity) {
    var _this;
    this.entity = _entity;
    _this = this;
    _this.scope.$apply(function() {
      _this.scope[_this.scopeList] = underscore.filter(_this.scope[_this.scopeList], function(obj) {
        return obj._id !== _entity._id;
      });
      return _this.scope[_this.scopeForm] = null;
    });
    return this;
  };

  AngularView.prototype._prepareEntityToSave = function(_entity) {
    var preperedEntity, _this;
    _this = this;
    _this.model.entity = null;
    preperedEntity = underscore.omit(_entity, '$$hashKey');
    return preperedEntity;
  };

  AngularView.prototype.prepareDataToList = function(list) {
    return list;
  };

  AngularView.prototype.formValidate = function() {
    this.form.validate();
    return this;
  };

  AngularView.prototype.startEvents = function() {
    return this;
  };

  AngularView.prototype.parentEntityLoad = function(_parentEntity) {
    this.parentEntity = _parentEntity;
    this.renderElementsDependentParent();
    return this;
  };

  AngularView.prototype.renderElementsDependentParent = function() {
    return this;
  };

  AngularView.prototype.dataGrid = function() {};

  AngularView.prototype.getOptionsFromKinveyCollection = function(scopeSelect, collectionName, columnName, objQuery) {
    var promise, _this;
    _this = this;
    objQuery = objQuery || new Kinvey.Query();
    return promise = Kinvey.DataStore.find(collectionName, objQuery, {
      success: function(response) {
        var options;
        options = [];
        $.each(response, function(index, item) {
          return options.push({
            id: item["_id"],
            name: item[columnName]
          });
        });
        return _this.scope.$apply(function() {
          return _this.scope[scopeSelect] = options;
        });
      }
    });
  };

  AngularView.prototype.list = function(scopeList, collectionName, objQuery) {
    var promise, _this;
    _this = this;
    objQuery = objQuery || new Kinvey.Query();
    return promise = Kinvey.DataStore.find(collectionName, objQuery, {
      success: function(response) {
        return _this.scope.$apply(function() {
          return _this.scope[scopeList] = response;
        });
      }
    });
  };

  AngularView.prototype.loadEntity = function(id, relationsList) {
    var _this;
    if (relationsList == null) {
      relationsList = {};
    }
    _this = this;
    return Kinvey.DataStore.get(_this.collectionName, id, {
      relations: relationsList,
      success: function(entity) {
        return _this.scope.$apply(function() {
          return _this.scope[_this.scopeForm] = _this._prepareEntityLoaded(entity);
        });
      }
    });
  };

  AngularView.prototype._prepareEntityLoaded = function(entity) {
    return entity;
  };

  AngularView.prototype.loadUploadEvents = function() {
    var _this;
    _this = this;
    return _this.scope.uploadImage = function(imageUrl) {
      var file, fileList, i, promise, uploads, _i, _ref;
      statusMessage('info', 'Fazendo upload da imagem. Aguarde.');
      _this.scope.wait = true;
      uploads = [];
      fileList = $(imageUrl);
      fileList = fileList[0].files;
      if (fileList.length > 0) {
        for (i = _i = 0, _ref = fileList.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          file = fileList.item(i);
          _this.scope.fileName = file.name;
          uploads.push(Kinvey.File.upload(file, null, {
            "public": true
          }));
        }
        promise = Kinvey.Defer.all(uploads);
        return promise.then((function(response) {
          var downloadURLs, _j, _len;
          downloadURLs = [];
          for (_j = 0, _len = response.length; _j < _len; _j++) {
            file = response[_j];
            promise = Kinvey.File.stream(file._id);
            downloadURLs.push(promise);
          }
          promise = Kinvey.Defer.all(downloadURLs);
          return promise.then((function(downloads) {
            var download, imageURL, imageURLs, _k, _len1;
            imageURLs = [];
            for (_k = 0, _len1 = downloads.length; _k < _len1; _k++) {
              download = downloads[_k];
              imageURL = download._downloadURL;
              imageURLs.push(imageURL);
            }
            return _this.scope.$apply(function() {
              _this.scope.imageUrlSrc = imageURLs.shift();
              _this.scope.showUploadImageOptions = _this.scope.imageUrlSrc !== "" ? false : true;
              _this.scope.wait = false;
              _this.scope[_this.scopeForm].imageUrl = _this.scope.imageUrlSrc;
              return statusMessage('success', 'Upload concluído com sucesso.');
            });
          }));
        }));
      }
    };
  };

  return AngularView;

})();
