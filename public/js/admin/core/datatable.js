// Generated by CoffeeScript 1.6.3
var DataTable;

DataTable = (function() {
  function DataTable() {
    this.dataTableContainer = null;
    this.dataTableId = null;
    this.collectionName = null;
    this.relations = {};
    this.columnNames = [];
    this.columnFields = [];
    this.actions = [];
    this.actionTitles = [];
    this.objectQuery = new Kinvey.Query();
    this.searchQuery = new Kinvey.Query();
    this.columnFormats = [];
    this.bAjax = true;
    this.replacementString = null;
  }

  DataTable.prototype.setContainer = function(containerId) {
    this.dataTableContainer = $(containerId);
    return this;
  };

  DataTable.prototype.setDataTableId = function(dataTableId) {
    this.dataTableId = dataTableId;
    return this;
  };

  DataTable.prototype.setCollectionName = function(collectionName) {
    this.collectionName = collectionName;
    return this;
  };

  DataTable.prototype.setRelations = function(relations) {
    this.relations = relations;
    return this;
  };

  DataTable.prototype.addColumnName = function(columnName) {
    this.columnNames.push(columnName);
    return this;
  };

  DataTable.prototype.addColumnField = function(columnField) {
    this.columnFields.push(columnField);
    return this;
  };

  DataTable.prototype.addAction = function(actionName, actionLink) {
    this.actions[actionName] = actionLink;
    return this;
  };

  DataTable.prototype.addActionTitle = function(actionName, actionTitle) {
    this.actionTitles[actionName] = actionTitle;
    return this;
  };

  DataTable.prototype.addColumnFormat = function(columnName, format) {
    this.columnFormats[columnName] = format;
    return this;
  };

  DataTable.prototype.setObjectQuery = function(objectQuery) {
    this.objectQuery = objectQuery;
    return this;
  };

  DataTable.prototype.setReplacementString = function(replacementString) {
    this.replacementString = replacementString;
    return this;
  };

  DataTable.prototype.addSearchRegex = function(columnName, string) {
    var regexSearch;
    regexSearch = new RegExp(string, 'i');
    this.objectQuery.or().matches(columnName, regexSearch);
    return this.objectQuery;
  };

  DataTable.prototype.prepareSearch = function(sSearch) {
    var column, columnAux, filter, filters, regexSearch, _i, _len, _ref;
    regexSearch = new RegExp(sSearch, 'i');
    filters = [];
    if (sSearch !== "") {
      _ref = this.columnFields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        column = _ref[_i];
        if (column !== 'actions') {
          columnAux = column.replace("-", ".");
          filter = underscore.object([columnAux], [
            {
              $regex: sSearch,
              $options: "i"
            }
          ]);
          filters.push(filter);
        }
      }
      this.objectQuery._filter['$or'] = filters;
    } else {
      this.objectQuery._filter = {};
    }
    return this.objectQuery;
  };

  DataTable.prototype.setAjax = function(bAjax) {
    this.bAjax = bAjax != null ? bAjax : false;
    return this;
  };

  DataTable.prototype.isAjax = function() {
    return this.bAjax;
  };

  DataTable.prototype.buildDataTable = function() {
    var aaData, json, _actionTitles, _actions, _colletionName, _columnFields, _columnFormats, _dataTableContainer, _dataTableId, _objectQuery, _relations, _replacementString, _searchQuery, _this;
    _objectQuery = this.objectQuery;
    _searchQuery = this.searchQuery;
    _relations = this.relations ? this.relations : {};
    _colletionName = this.collectionName;
    _columnFields = this.columnFields;
    _columnFormats = this.columnFormats;
    _replacementString = this.replacementString;
    _actions = this.actions;
    _actionTitles = this.actionTitles;
    _dataTableId = this.dataTableId;
    _dataTableContainer = this.dataTableContainer;
    _this = this;
    _dataTableContainer.html('<table class="table table-striped table-bordered dTableR" id="' + _dataTableId + '"></table>');
    if (!this.isAjax()) {
      json = {
        aaData: [],
        aoColumns: [],
        bDestroy: true,
        bRetrieve: true
      };
      aaData = [];
      Kinvey.DataStore.find(_colletionName, _objectQuery, {
        relations: _relations,
        success: function(collection) {
          var item, lineNumber, values, _i, _len;
          lineNumber = 0;
          for (_i = 0, _len = collection.length; _i < _len; _i++) {
            item = collection[_i];
            values = [];
            _columnFields.forEach(function(col, columnNumber) {
              var action, cascadeFields, dataValue, fieldName, fieldsNameReplace, htmlActions, link, _j, _len1;
              if (col !== "actions") {
                cascadeFields = col.split("-");
                dataValue = item;
                for (_j = 0, _len1 = cascadeFields.length; _j < _len1; _j++) {
                  fieldName = cascadeFields[_j];
                  if ((dataValue != null) && !underscore.isUndefined(dataValue)) {
                    dataValue = dataValue[fieldName];
                  }
                }
                return values[columnNumber] = _this.formatColumnData(_columnFormats, col, dataValue);
              } else {
                htmlActions = "";
                fieldsNameReplace = [];
                if ((_replacementString == null) || underscore.isUndefined(_replacementString) || _replacementString === "") {
                  _replacementString = "%_id%";
                } else {
                  fieldsNameReplace = _replacementString.split("-");
                  if (fieldsNameReplace.length === 1) {
                    _replacementString = fieldsNameReplace[0];
                  }
                }
                for (action in _actions) {
                  if ($.isArray(fieldsNameReplace) && fieldsNameReplace.length <= 1) {
                    link = _actions[action];
                    link = link.replace("" + _replacementString + "", item[_replacementString.replace("%", "").replace("%", "")]);
                    htmlActions += "<a href='" + link + "' data-toggle='tooltip' data-placement='top' class='action " + action + "' title='" + _actionTitles[action] + "'><i class='icon-" + action + "'></i></a>";
                  } else {
                    link = _actions[action];
                    link = link.replace("" + fieldsNameReplace[1] + "", item[fieldsNameReplace[0]][fieldsNameReplace[1].replace("%", "").replace("%", "")]);
                    htmlActions += "<a href='" + link + "' data-toggle='tooltip' data-placement='top' class='action " + action + "' title='" + _actionTitles[action] + "'><i class='icon-" + action + "'></i></a>";
                  }
                }
                return values[columnNumber] = htmlActions;
              }
            });
            aaData[lineNumber] = values;
            lineNumber++;
          }
          json.aaData = aaData;
          json.aoColumns = _this.buildTheadByJson();
          $('#' + _dataTableId).dataTable(json);
          return _this.isCompleted();
        },
        error: function(e) {
          return statusMessage("error", e.description);
        }
      });
    } else {
      this.buildTable();
      $('#' + this.dataTableId).dataTable({
        bProcessing: true,
        bServerSide: true,
        bDestroy: true,
        bRetrieve: true,
        sAjaxSource: "false",
        bFilter: true,
        fnServerData: function(sSource, aoData, fnCallback, oSettings) {
          var iRequestLength, iRequestStart, page, sEcho, sSearch, sortCol, sortDir;
          sEcho = _this.fnGetKey(aoData, "sEcho");
          sSearch = _this.fnGetKey(aoData, "sSearch");
          iRequestStart = _this.fnGetKey(aoData, "iDisplayStart");
          iRequestLength = _this.fnGetKey(aoData, "iDisplayLength");
          sortCol = _this.fnGetKey(aoData, "iSortCol_0");
          sortDir = _this.fnGetKey(aoData, "sSortDir_0");
          page = iRequestStart === 0 ? 1 : Math.round(iRequestStart / iRequestLength) + 1;
          json = {
            "sEcho": sEcho,
            "iTotalRecords": "",
            "iTotalDisplayRecords": ""
          };
          if (sortCol > 0) {
            if (sortDir === 'desc') {
              _objectQuery.descending(_columnFields[sortCol]);
            } else {
              _objectQuery.ascending(_columnFields[sortCol]);
            }
          }
          _objectQuery.limit(iRequestLength);
          _objectQuery.skip(iRequestStart);
          return Kinvey.DataStore.count(_colletionName, _objectQuery, {
            success: function(count) {
              json.iTotalRecords = count;
              json.iTotalDisplayRecords = count;
              _objectQuery = _this.prepareSearch(sSearch);
              aaData = [];
              Kinvey.DataStore.find(_colletionName, _objectQuery, {
                relations: _relations,
                success: function(collection, response, options) {
                  var item, lineNumber, values, _i, _len;
                  lineNumber = 0;
                  for (_i = 0, _len = collection.length; _i < _len; _i++) {
                    item = collection[_i];
                    values = [];
                    _columnFields.forEach(function(col, columnNumber) {
                      var action, cascadeFields, dataValue, fieldName, fieldsNameReplace, htmlActions, link, _j, _len1;
                      if (col !== "actions") {
                        cascadeFields = col.split("-");
                        dataValue = item;
                        for (_j = 0, _len1 = cascadeFields.length; _j < _len1; _j++) {
                          fieldName = cascadeFields[_j];
                          if ((dataValue != null) && !underscore.isUndefined(dataValue)) {
                            dataValue = dataValue[fieldName];
                          }
                        }
                        return values[columnNumber] = _this.formatColumnData(_columnFormats, col, dataValue);
                      } else {
                        htmlActions = "";
                        fieldsNameReplace = [];
                        if ((_replacementString == null) || underscore.isUndefined(_replacementString) || _replacementString === "") {
                          _replacementString = "%_id%";
                        } else {
                          fieldsNameReplace = _replacementString.split("-");
                          if (fieldsNameReplace.length === 1) {
                            _replacementString = fieldsNameReplace[0];
                          }
                        }
                        for (action in _actions) {
                          if ($.isArray(fieldsNameReplace) && fieldsNameReplace.length <= 1) {
                            link = _actions[action];
                            link = link.replace("" + _replacementString + "", item[_replacementString.replace("%", "").replace("%", "")]);
                            htmlActions += "<a href='" + link + "' data-toggle='tooltip' data-placement='top' class='action " + action + "' title='" + _actionTitles[action] + "'><i class='icon-" + action + "'></i></a>";
                          } else {
                            link = _actions[action];
                            link = link.replace("" + fieldsNameReplace[1] + "", item[fieldsNameReplace[0]][fieldsNameReplace[1].replace("%", "").replace("%", "")]);
                            htmlActions += "<a href='" + link + "' data-toggle='tooltip' data-placement='top' class='action " + action + "' title='" + _actionTitles[action] + "'><i class='icon-" + action + "'></i></a>";
                          }
                        }
                        return values[columnNumber] = htmlActions;
                      }
                    });
                    aaData[lineNumber] = values;
                    lineNumber++;
                  }
                  json.aaData = aaData;
                  fnCallback(json);
                  return _this.isCompleted();
                },
                error: function(e) {
                  return statusMessage("error", e.description);
                }
              });
              return {
                error: function(e) {
                  return statusMessage("error", e.description);
                }
              };
            }
          });
        }
      });
    }

    /*
    Remove o registro
    */
    $("body").delegate(".remove, .delete", "click", function() {
      var id, promise, tr;
      tr = $(this).parents("tr");
      if (confirm("Deseja realmente excluir o registro?")) {
        id = $(this).attr("href").replace("#", "").replace("/", "");
        promise = Kinvey.DataStore.get(_colletionName, id, {
          success: function(response) {
            response["inactivatedAt"] = moment().format("YYYY-MM-DDTHH:mm:ss.SSS") + 'Z';
            return Kinvey.DataStore.save(_colletionName, response, {
              success: function(response) {
                tr.remove();
                return statusMessage("success", "Registro removido com sucesso!");
              }
            });
          }
        });
        return false;
      }
    });
    return this;
  };

  DataTable.prototype.fnSetKey = function(aoData, sKey, mValue) {
    var i, iLen, _results;
    i = 0;
    iLen = aoData.length;
    _results = [];
    while (i < iLen) {
      if (aoData[i].name === sKey) {
        aoData[i].value = mValue;
      }
      _results.push(i++);
    }
    return _results;
  };

  DataTable.prototype.fnGetKey = function(aoData, sKey) {
    var i, iLen;
    i = 0;
    iLen = aoData.length;
    while (i < iLen) {
      if (aoData[i].name === sKey) {
        return aoData[i].value;
      }
      i = i + 1;
    }
    return null;
  };

  DataTable.prototype.formatColumnData = function(_columnFormats, col, dataValue) {
    if (_columnFormats[col] === "money" || _columnFormats[col] === "currency") {
      dataValue = accounting.formatMoney(parseFloat(dataValue), "R$ ", 2, ".", ",");
    } else if ((_columnFormats[col] === "data" || _columnFormats[col]) && (dataValue !== "" && (dataValue != null) && !underscore.isUndefined(dataValue))) {
      dataValue = moment(dataValue).format("DD/MM/YYYY");
    } else {
      if (underscore.isUndefined(dataValue)) {
        dataValue = "-";
      }
    }
    return dataValue;
  };

  DataTable.prototype.buildTable = function() {
    var columnName, htmlGrid, _i, _len, _ref;
    htmlGrid = "<table class='table table-striped table-bordered dTableR' id='" + this.dataTableId + "'>";
    htmlGrid += "<thead><tr>";
    _ref = this.columnNames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      columnName = _ref[_i];
      htmlGrid += "<th>" + columnName + "</th>";
    }
    htmlGrid += "</tr></thead><tbody></table>";
    return this.dataTableContainer.html(htmlGrid);
  };

  DataTable.prototype.buildTheadByJson = function() {
    var columnName, tHead, _i, _len, _ref;
    tHead = [];
    _ref = this.columnNames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      columnName = _ref[_i];
      tHead.push({
        sTitle: columnName,
        sClass: ""
      });
    }
    return tHead;
  };

  DataTable.prototype.isCompleted = function() {};

  return DataTable;

})();
